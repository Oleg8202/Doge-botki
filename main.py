import os
os.system("pip uninstall -y binance && pip install python-binance")
import time
import math
from binance.client import Client
from binance.enums import *
import pandas as pd
import talib
from flask import Flask
from threading import Thread

# üîê API –∫–ª—é—á–∏
api_key = "pzmx5Wi90g3dIeb23Z2xrUusw0XPoE0QGfTZGnYnelLSRaBOgL4fDAdzuIbEz7io"
api_secret = "vTyFj3kAc686NEXjcBbG21lKNLO1elbHfadB2CZbfv6XvsEYEkKWwa5s2cVWdvRT"

client = Client(api_key, api_secret)

symbol = "DOGEUSDT"
rsi_period = 14
rsi_oversold = 30
rsi_takeprofit = 70  # RSI –≤—ã—à–µ ‚Äî –ø—Ä–æ–¥–∞—ë–º
trade_amount = 8  # $8

def get_symbol_info():
    info = client.get_symbol_info(symbol)
    lot_size = None
    min_qty = None
    price_filter = None
    for f in info['filters']:
        if f['filterType'] == 'LOT_SIZE':
            min_qty = float(f['minQty'])
            lot_size = float(f['stepSize'])
        if f['filterType'] == 'PRICE_FILTER':
            price_filter = f
    return min_qty, lot_size, price_filter

min_qty, step_size, price_filter = get_symbol_info()
price_precision = int(round(-math.log10(float(price_filter['tickSize']))))

def round_down_qty(qty, step):
    return float(math.floor(qty / step) * step)

def round_down_price(price, precision):
    return float(f"{price:.{precision}f}")

def get_klines():
    klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1MINUTE, limit=100)
    closes = [float(k[4]) for k in klines]
    return closes

def get_rsi():
    closes = get_klines()
    rsi = talib.RSI(pd.Series(closes), timeperiod=rsi_period)
    return rsi.iloc[-1]

def get_price():
    return float(client.get_symbol_ticker(symbol=symbol)['price'])

def get_free_balance(asset='USDT'):
    balance = client.get_asset_balance(asset)
    return float(balance['free']) if balance else 0

def get_free_doge():
    balance = client.get_asset_balance(asset='DOGE')
    return float(balance['free']) if balance else 0

def cancel_all_orders():
    orders = client.get_open_orders(symbol=symbol)
    for order in orders:
        try:
            client.cancel_order(symbol=symbol, orderId=order['orderId'])
            print(f"‚ùå –û—Ç–º–µ–Ω—ë–Ω –æ—Ä–¥–µ—Ä ID {order['orderId']}")
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞:", e)

def place_trade():
    price = get_price()
    usdt = get_free_balance()
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt}")

    amount = trade_amount / price
    qty = round_down_qty(amount, step_size)
    if qty < min_qty:
        print(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {qty} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_qty}")
        return

    if usdt < trade_amount:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT")
        return

    try:
        # –ü–æ–∫—É–ø–∫–∞
        buy_order = client.order_market_buy(symbol=symbol, quantity=qty)
        print(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {qty} DOGE –ø–æ —Ä—ã–Ω–∫—É")

        buy_price = price

        qty_for_orders = qty * 0.99
        qty_for_orders = round_down_qty(qty_for_orders, step_size)
        if qty_for_orders < min_qty:
            print("‚ùå –ú–∞–ª–æ DOGE –¥–ª—è TP/SL")
            return

        qty_tp = round_down_qty(qty_for_orders / 2, step_size)
        qty_sl = qty_for_orders - qty_tp

        if qty_tp < min_qty or qty_sl < min_qty:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DOGE –¥–ª—è TP –∏–ª–∏ SL")
            return

        tp_price = round_down_price(buy_price * 1.05, price_precision)
        sl_price = round_down_price(buy_price * 0.985, price_precision)

        print(f"üéØ TP: {tp_price}, SL: {sl_price}")

        client.order_limit_sell(
            symbol=symbol,
            quantity=str(qty_tp),
            price=str(tp_price),
            timeInForce=TIME_IN_FORCE_GTC
        )

        client.create_order(
            symbol=symbol,
            side=SIDE_SELL,
            type=ORDER_TYPE_STOP_LOSS_LIMIT,
            quantity=str(qty_sl),
            price=str(sl_price),
            stopPrice=str(sl_price),
            timeInForce=TIME_IN_FORCE_GTC
        )

        print(f"üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: TP {qty_tp}, SL {qty_sl}")

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏:", e)

def check_open_orders():
    orders = client.get_open_orders(symbol=symbol)
    return len(orders) > 0

def sell_all_doge():
    cancel_all_orders()
    doge_balance = get_free_doge()
    if doge_balance >= min_qty:
        qty = round_down_qty(doge_balance, step_size)
        try:
            client.order_market_sell(symbol=symbol, quantity=qty)
            print(f"üöÄ –ü—Ä–æ–¥–∞–Ω–æ {qty} DOGE –ø–æ —Ä—ã–Ω–∫—É (RSI > 70)")
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ DOGE:", e)
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DOGE –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏ RSI > 70")

# üîÅ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def run_bot():
    while True:
        try:
            rsi = get_rsi()
            print(f"üìä –ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã: {rsi:.2f}")

            if rsi > rsi_takeprofit:
                print("üìà RSI –≤—ã—à–µ 70 ‚Äî –ø—Ä–æ–¥–∞—ë–º –≤—Å—ë –∏ –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞")
                sell_all_doge()
            else:
                if not check_open_orders():
                    if rsi < rsi_oversold:
                        place_trade()
                    else:
                        print("‚è≥ –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ RSI...")
                else:
                    print("üîí –û—Ä–¥–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å, –∂–¥—ë–º...")

        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ:", e)

        time.sleep(60)

# üöÄ Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ø–∞–ª
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ DOGE –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_server():
    app.run(host='0.0.0.0', port=8080)

# üßµ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
Thread(target=run_bot).start()
Thread(target=run_server).start()
